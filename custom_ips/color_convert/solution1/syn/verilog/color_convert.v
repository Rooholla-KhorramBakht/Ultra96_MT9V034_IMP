// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.698000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=763,HLS_SYN_LUT=1096,HLS_VERSION=2018_2}" *)

module color_convert (
        ap_clk,
        ap_rst_n,
        stream_in_24_TDATA,
        stream_in_24_TVALID,
        stream_in_24_TREADY,
        stream_in_24_TUSER,
        stream_in_24_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TREADY,
        stream_out_24_TUSER,
        stream_out_24_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        control,
        ap_rst_n_control
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] stream_in_24_TDATA;
input   stream_in_24_TVALID;
output   stream_in_24_TREADY;
input  [0:0] stream_in_24_TUSER;
input  [0:0] stream_in_24_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
input   stream_out_24_TREADY;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   control;
input   ap_rst_n_control;

 reg    ap_rst_n_inv;
reg   [23:0] stream_in_24_data_0_data_out;
wire    stream_in_24_data_0_vld_in;
wire    stream_in_24_data_0_vld_out;
wire    stream_in_24_data_0_ack_in;
reg    stream_in_24_data_0_ack_out;
reg   [23:0] stream_in_24_data_0_payload_A;
reg   [23:0] stream_in_24_data_0_payload_B;
reg    stream_in_24_data_0_sel_rd;
reg    stream_in_24_data_0_sel_wr;
wire    stream_in_24_data_0_sel;
wire    stream_in_24_data_0_load_A;
wire    stream_in_24_data_0_load_B;
reg   [1:0] stream_in_24_data_0_state;
wire    stream_in_24_data_0_state_cmp_full;
reg   [0:0] stream_in_24_user_V_0_data_out;
wire    stream_in_24_user_V_0_vld_in;
wire    stream_in_24_user_V_0_vld_out;
wire    stream_in_24_user_V_0_ack_in;
reg    stream_in_24_user_V_0_ack_out;
reg   [0:0] stream_in_24_user_V_0_payload_A;
reg   [0:0] stream_in_24_user_V_0_payload_B;
reg    stream_in_24_user_V_0_sel_rd;
reg    stream_in_24_user_V_0_sel_wr;
wire    stream_in_24_user_V_0_sel;
wire    stream_in_24_user_V_0_load_A;
wire    stream_in_24_user_V_0_load_B;
reg   [1:0] stream_in_24_user_V_0_state;
wire    stream_in_24_user_V_0_state_cmp_full;
reg   [0:0] stream_in_24_last_V_0_data_out;
wire    stream_in_24_last_V_0_vld_in;
wire    stream_in_24_last_V_0_vld_out;
wire    stream_in_24_last_V_0_ack_in;
reg    stream_in_24_last_V_0_ack_out;
reg   [0:0] stream_in_24_last_V_0_payload_A;
reg   [0:0] stream_in_24_last_V_0_payload_B;
reg    stream_in_24_last_V_0_sel_rd;
reg    stream_in_24_last_V_0_sel_wr;
wire    stream_in_24_last_V_0_sel;
wire    stream_in_24_last_V_0_load_A;
wire    stream_in_24_last_V_0_load_B;
reg   [1:0] stream_in_24_last_V_0_state;
wire    stream_in_24_last_V_0_state_cmp_full;
reg   [23:0] stream_out_24_data_1_data_out;
reg    stream_out_24_data_1_vld_in;
wire    stream_out_24_data_1_vld_out;
wire    stream_out_24_data_1_ack_in;
wire    stream_out_24_data_1_ack_out;
reg   [23:0] stream_out_24_data_1_payload_A;
reg   [23:0] stream_out_24_data_1_payload_B;
reg    stream_out_24_data_1_sel_rd;
reg    stream_out_24_data_1_sel_wr;
wire    stream_out_24_data_1_sel;
wire    stream_out_24_data_1_load_A;
wire    stream_out_24_data_1_load_B;
reg   [1:0] stream_out_24_data_1_state;
wire    stream_out_24_data_1_state_cmp_full;
reg   [0:0] stream_out_24_user_V_1_data_out;
reg    stream_out_24_user_V_1_vld_in;
wire    stream_out_24_user_V_1_vld_out;
wire    stream_out_24_user_V_1_ack_in;
wire    stream_out_24_user_V_1_ack_out;
reg   [0:0] stream_out_24_user_V_1_payload_A;
reg   [0:0] stream_out_24_user_V_1_payload_B;
reg    stream_out_24_user_V_1_sel_rd;
reg    stream_out_24_user_V_1_sel_wr;
wire    stream_out_24_user_V_1_sel;
wire    stream_out_24_user_V_1_load_A;
wire    stream_out_24_user_V_1_load_B;
reg   [1:0] stream_out_24_user_V_1_state;
wire    stream_out_24_user_V_1_state_cmp_full;
reg   [0:0] stream_out_24_last_V_1_data_out;
reg    stream_out_24_last_V_1_vld_in;
wire    stream_out_24_last_V_1_vld_out;
wire    stream_out_24_last_V_1_ack_in;
wire    stream_out_24_last_V_1_ack_out;
reg   [0:0] stream_out_24_last_V_1_payload_A;
reg   [0:0] stream_out_24_last_V_1_payload_B;
reg    stream_out_24_last_V_1_sel_rd;
reg    stream_out_24_last_V_1_sel_wr;
wire    stream_out_24_last_V_1_sel;
wire    stream_out_24_last_V_1_load_A;
wire    stream_out_24_last_V_1_load_B;
reg   [1:0] stream_out_24_last_V_1_state;
wire    stream_out_24_last_V_1_state_cmp_full;
wire   [9:0] c1_c1_V;
reg  signed [9:0] c1_c1_V_0_data_reg;
reg    c1_c1_V_0_vld_reg;
reg    c1_c1_V_0_ack_out;
wire   [9:0] c1_c2_V;
reg   [9:0] c1_c2_V_0_data_reg;
reg    c1_c2_V_0_vld_reg;
reg    c1_c2_V_0_ack_out;
wire   [9:0] c1_c3_V;
reg   [9:0] c1_c3_V_0_data_reg;
reg    c1_c3_V_0_vld_reg;
reg    c1_c3_V_0_ack_out;
wire   [9:0] c2_c1_V;
reg  signed [9:0] c2_c1_V_0_data_reg;
reg    c2_c1_V_0_vld_reg;
reg    c2_c1_V_0_ack_out;
wire   [9:0] c2_c2_V;
reg   [9:0] c2_c2_V_0_data_reg;
reg    c2_c2_V_0_vld_reg;
reg    c2_c2_V_0_ack_out;
wire   [9:0] c2_c3_V;
reg   [9:0] c2_c3_V_0_data_reg;
reg    c2_c3_V_0_vld_reg;
reg    c2_c3_V_0_ack_out;
wire   [9:0] c3_c1_V;
reg  signed [9:0] c3_c1_V_0_data_reg;
reg    c3_c1_V_0_vld_reg;
reg    c3_c1_V_0_ack_out;
wire   [9:0] c3_c2_V;
reg   [9:0] c3_c2_V_0_data_reg;
reg    c3_c2_V_0_vld_reg;
reg    c3_c2_V_0_ack_out;
wire   [9:0] c3_c3_V;
reg   [9:0] c3_c3_V_0_data_reg;
reg    c3_c3_V_0_vld_reg;
reg    c3_c3_V_0_ack_out;
wire   [9:0] bias_c1_V;
reg   [9:0] bias_c1_V_0_data_reg;
reg    bias_c1_V_0_vld_reg;
reg    bias_c1_V_0_ack_out;
wire   [9:0] bias_c2_V;
reg   [9:0] bias_c2_V_0_data_reg;
reg    bias_c2_V_0_vld_reg;
reg    bias_c2_V_0_ack_out;
wire   [9:0] bias_c3_V;
reg   [9:0] bias_c3_V_0_data_reg;
reg    bias_c3_V_0_vld_reg;
reg    bias_c3_V_0_ack_out;
reg    stream_in_24_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    stream_out_24_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_rst_n_control_inv;
reg   [9:0] bias_c3_V_read_reg_924;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] bias_c2_V_read_reg_929;
reg   [9:0] bias_c1_V_read_reg_934;
reg  signed [9:0] c3_c3_V_read_reg_939;
reg  signed [9:0] c2_c3_V_read_reg_944;
reg  signed [9:0] c1_c3_V_read_reg_949;
reg   [0:0] stream_in_24_user_V_s_reg_954;
reg   [0:0] stream_in_24_user_V_s_reg_954_pp0_iter2_reg;
reg   [0:0] stream_in_24_last_V_s_reg_959;
reg   [0:0] stream_in_24_last_V_s_reg_959_pp0_iter2_reg;
reg   [7:0] loc_V_2_reg_964;
wire  signed [18:0] grp_fu_870_p3;
reg  signed [18:0] p_Val2_2_reg_969;
wire  signed [18:0] grp_fu_878_p3;
reg  signed [18:0] p_Val2_11_reg_974;
wire  signed [18:0] grp_fu_886_p3;
reg  signed [18:0] p_Val2_19_reg_979;
wire   [0:0] signbit_fu_326_p3;
reg   [0:0] signbit_reg_984;
wire   [7:0] p_Val2_7_fu_363_p2;
reg   [7:0] p_Val2_7_reg_990;
wire   [0:0] p_38_i_fu_419_p2;
reg   [0:0] p_38_i_reg_996;
wire   [0:0] p_39_demorgan_i_fu_425_p2;
reg   [0:0] p_39_demorgan_i_reg_1002;
wire   [0:0] signbit_1_fu_453_p3;
reg   [0:0] signbit_1_reg_1008;
wire   [7:0] p_Val2_15_fu_490_p2;
reg   [7:0] p_Val2_15_reg_1014;
wire   [0:0] p_38_i1_fu_546_p2;
reg   [0:0] p_38_i1_reg_1020;
wire   [0:0] p_39_demorgan_i1_fu_552_p2;
reg   [0:0] p_39_demorgan_i1_reg_1026;
wire   [0:0] signbit_2_fu_580_p3;
reg   [0:0] signbit_2_reg_1032;
wire   [7:0] p_Val2_23_fu_617_p2;
reg   [7:0] p_Val2_23_reg_1038;
wire   [0:0] p_38_i2_fu_673_p2;
reg   [0:0] p_38_i2_reg_1044;
wire   [0:0] p_39_demorgan_i2_fu_679_p2;
reg   [0:0] p_39_demorgan_i2_reg_1050;
wire   [23:0] stream_out_24_data_t_fu_859_p4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] loc_V_fu_215_p1;
wire   [7:0] loc_V_1_fu_219_p4;
wire   [7:0] p_Val2_1_fu_255_p0;
wire   [17:0] OP1_V_1_fu_247_p1;
wire  signed [9:0] p_Val2_1_fu_255_p1;
wire  signed [17:0] p_Val2_1_fu_255_p2;
wire   [7:0] p_Val2_9_fu_273_p0;
wire  signed [9:0] p_Val2_9_fu_273_p1;
wire  signed [17:0] p_Val2_9_fu_273_p2;
wire   [7:0] p_Val2_16_fu_291_p0;
wire  signed [9:0] p_Val2_16_fu_291_p1;
wire  signed [17:0] p_Val2_16_fu_291_p2;
wire   [17:0] tmp_3_fu_310_p3;
wire  signed [19:0] grp_fu_894_p3;
wire  signed [19:0] tmp_3_cast_fu_317_p1;
(* use_dsp48 = "no" *) wire   [19:0] p_Val2_5_fu_321_p2;
wire   [0:0] tmp_28_fu_344_p3;
wire   [7:0] tmp_7_fu_351_p1;
wire   [7:0] p_Val2_6_fu_334_p4;
wire   [0:0] tmp_30_fu_369_p3;
wire   [0:0] tmp_29_fu_355_p3;
wire   [0:0] tmp_5_fu_377_p2;
wire   [3:0] tmp_2_fu_389_p4;
wire   [0:0] carry_fu_383_p2;
wire   [0:0] Range1_all_ones_fu_399_p2;
wire   [0:0] Range1_all_zeros_fu_405_p2;
wire   [0:0] deleted_zeros_fu_411_p3;
wire   [17:0] tmp_12_fu_437_p3;
wire  signed [19:0] grp_fu_904_p3;
wire  signed [19:0] tmp_16_cast_fu_444_p1;
(* use_dsp48 = "no" *) wire   [19:0] p_Val2_13_fu_448_p2;
wire   [0:0] tmp_32_fu_471_p3;
wire   [7:0] tmp_13_fu_478_p1;
wire   [7:0] p_Val2_14_fu_461_p4;
wire   [0:0] tmp_34_fu_496_p3;
wire   [0:0] tmp_33_fu_482_p3;
wire   [0:0] tmp_14_fu_504_p2;
wire   [3:0] tmp_15_fu_516_p4;
wire   [0:0] carry_1_fu_510_p2;
wire   [0:0] Range1_all_ones_1_fu_526_p2;
wire   [0:0] Range1_all_zeros_1_fu_532_p2;
wire   [0:0] deleted_zeros_1_fu_538_p3;
wire   [17:0] tmp_21_fu_564_p3;
wire  signed [19:0] grp_fu_914_p3;
wire  signed [19:0] tmp_27_cast_fu_571_p1;
(* use_dsp48 = "no" *) wire   [19:0] p_Val2_21_fu_575_p2;
wire   [0:0] tmp_36_fu_598_p3;
wire   [7:0] tmp_22_fu_605_p1;
wire   [7:0] p_Val2_22_fu_588_p4;
wire   [0:0] tmp_38_fu_623_p3;
wire   [0:0] tmp_37_fu_609_p3;
wire   [0:0] tmp_23_fu_631_p2;
wire   [3:0] tmp_24_fu_643_p4;
wire   [0:0] carry_2_fu_637_p2;
wire   [0:0] Range1_all_ones_2_fu_653_p2;
wire   [0:0] Range1_all_zeros_2_fu_659_p2;
wire   [0:0] deleted_zeros_2_fu_665_p3;
wire   [0:0] tmp_8_fu_685_p2;
wire   [0:0] signbit_not_fu_695_p2;
wire   [0:0] neg_src_5_not_fu_700_p2;
wire   [0:0] p_39_demorgan_i_not_fu_710_p2;
wire   [0:0] brmerge_i_i_not_fu_705_p2;
wire   [0:0] neg_src_fu_690_p2;
wire   [0:0] brmerge_fu_715_p2;
wire   [7:0] p_mux_fu_721_p3;
wire   [7:0] p_s_fu_728_p3;
wire   [0:0] tmp_16_fu_743_p2;
wire   [0:0] signbit_1_not_fu_753_p2;
wire   [0:0] neg_src_not_fu_758_p2;
wire   [0:0] p_39_demorgan_i461_no_fu_768_p2;
wire   [0:0] brmerge_i_i463_not_fu_763_p2;
wire   [0:0] neg_src_6_fu_748_p2;
wire   [0:0] brmerge1_fu_773_p2;
wire   [7:0] p_mux1_fu_779_p3;
wire   [7:0] p_1_fu_786_p3;
wire   [0:0] tmp_25_fu_801_p2;
wire   [0:0] signbit_2_not_fu_811_p2;
wire   [0:0] neg_src_6_not_fu_816_p2;
wire   [0:0] p_39_demorgan_i482_no_fu_826_p2;
wire   [0:0] brmerge_i_i484_not_fu_821_p2;
wire   [0:0] neg_src_7_fu_806_p2;
wire   [0:0] brmerge2_fu_831_p2;
wire   [7:0] p_mux2_fu_837_p3;
wire   [7:0] p_2_fu_844_p3;
wire   [7:0] out3_V_fu_851_p3;
wire   [7:0] out2_V_fu_793_p3;
wire   [7:0] out1_V_fu_735_p3;
wire   [7:0] grp_fu_870_p0;
wire   [17:0] OP1_V_fu_239_p1;
wire   [7:0] grp_fu_878_p0;
wire   [7:0] grp_fu_886_p0;
wire   [7:0] grp_fu_894_p0;
wire   [17:0] OP1_V_2_fu_301_p1;
wire   [7:0] grp_fu_904_p0;
wire   [7:0] grp_fu_914_p0;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 stream_in_24_data_0_sel_rd = 1'b0;
#0 stream_in_24_data_0_sel_wr = 1'b0;
#0 stream_in_24_data_0_state = 2'd0;
#0 stream_in_24_user_V_0_sel_rd = 1'b0;
#0 stream_in_24_user_V_0_sel_wr = 1'b0;
#0 stream_in_24_user_V_0_state = 2'd0;
#0 stream_in_24_last_V_0_sel_rd = 1'b0;
#0 stream_in_24_last_V_0_sel_wr = 1'b0;
#0 stream_in_24_last_V_0_state = 2'd0;
#0 stream_out_24_data_1_sel_rd = 1'b0;
#0 stream_out_24_data_1_sel_wr = 1'b0;
#0 stream_out_24_data_1_state = 2'd0;
#0 stream_out_24_user_V_1_sel_rd = 1'b0;
#0 stream_out_24_user_V_1_sel_wr = 1'b0;
#0 stream_out_24_user_V_1_state = 2'd0;
#0 stream_out_24_last_V_1_sel_rd = 1'b0;
#0 stream_out_24_last_V_1_sel_wr = 1'b0;
#0 stream_out_24_last_V_1_state = 2'd0;
#0 c1_c1_V_0_data_reg = 10'd0;
#0 c1_c1_V_0_vld_reg = 1'b0;
#0 c1_c2_V_0_data_reg = 10'd0;
#0 c1_c2_V_0_vld_reg = 1'b0;
#0 c1_c3_V_0_data_reg = 10'd0;
#0 c1_c3_V_0_vld_reg = 1'b0;
#0 c2_c1_V_0_data_reg = 10'd0;
#0 c2_c1_V_0_vld_reg = 1'b0;
#0 c2_c2_V_0_data_reg = 10'd0;
#0 c2_c2_V_0_vld_reg = 1'b0;
#0 c2_c3_V_0_data_reg = 10'd0;
#0 c2_c3_V_0_vld_reg = 1'b0;
#0 c3_c1_V_0_data_reg = 10'd0;
#0 c3_c1_V_0_vld_reg = 1'b0;
#0 c3_c2_V_0_data_reg = 10'd0;
#0 c3_c2_V_0_vld_reg = 1'b0;
#0 c3_c3_V_0_data_reg = 10'd0;
#0 c3_c3_V_0_vld_reg = 1'b0;
#0 bias_c1_V_0_data_reg = 10'd0;
#0 bias_c1_V_0_vld_reg = 1'b0;
#0 bias_c2_V_0_data_reg = 10'd0;
#0 bias_c2_V_0_vld_reg = 1'b0;
#0 bias_c3_V_0_data_reg = 10'd0;
#0 bias_c3_V_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

color_convert_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
color_convert_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(control),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c1_c1_V(c1_c1_V),
    .c1_c2_V(c1_c2_V),
    .c1_c3_V(c1_c3_V),
    .c2_c1_V(c2_c1_V),
    .c2_c2_V(c2_c2_V),
    .c2_c3_V(c2_c3_V),
    .c3_c1_V(c3_c1_V),
    .c3_c2_V(c3_c2_V),
    .c3_c3_V(c3_c3_V),
    .bias_c1_V(bias_c1_V),
    .bias_c2_V(bias_c2_V),
    .bias_c3_V(bias_c3_V),
    .clk(ap_clk),
    .rst(ap_rst_n_control_inv)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U1(
    .din0(grp_fu_870_p0),
    .din1(c1_c1_V_0_data_reg),
    .din2(p_Val2_1_fu_255_p2),
    .dout(grp_fu_870_p3)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U2(
    .din0(grp_fu_878_p0),
    .din1(c2_c1_V_0_data_reg),
    .din2(p_Val2_9_fu_273_p2),
    .dout(grp_fu_878_p3)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U3(
    .din0(grp_fu_886_p0),
    .din1(c3_c1_V_0_data_reg),
    .din2(p_Val2_16_fu_291_p2),
    .dout(grp_fu_886_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U4(
    .din0(grp_fu_894_p0),
    .din1(c1_c3_V_read_reg_949),
    .din2(p_Val2_2_reg_969),
    .dout(grp_fu_894_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U5(
    .din0(grp_fu_904_p0),
    .din1(c2_c3_V_read_reg_944),
    .din2(p_Val2_11_reg_974),
    .dout(grp_fu_904_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U6(
    .din0(grp_fu_914_p0),
    .din1(c3_c3_V_read_reg_939),
    .din2(p_Val2_19_reg_979),
    .dout(grp_fu_914_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_data_0_ack_out == 1'b1) & (stream_in_24_data_0_vld_out == 1'b1))) begin
            stream_in_24_data_0_sel_rd <= ~stream_in_24_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_data_0_ack_in == 1'b1) & (stream_in_24_data_0_vld_in == 1'b1))) begin
            stream_in_24_data_0_sel_wr <= ~stream_in_24_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_state == 2'd2)) | ((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_state == 2'd3) & (stream_in_24_data_0_ack_out == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd2;
        end else if ((((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_state == 2'd1)) | ((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_state == 2'd3) & (stream_in_24_data_0_vld_in == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd1;
        end else if (((~((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_ack_out == 1'b1)) & ~((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_vld_in == 1'b1)) & (stream_in_24_data_0_state == 2'd3)) | ((stream_in_24_data_0_state == 2'd1) & (stream_in_24_data_0_ack_out == 1'b1)) | ((stream_in_24_data_0_state == 2'd2) & (stream_in_24_data_0_vld_in == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd3;
        end else begin
            stream_in_24_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_last_V_0_ack_out == 1'b1) & (stream_in_24_last_V_0_vld_out == 1'b1))) begin
            stream_in_24_last_V_0_sel_rd <= ~stream_in_24_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_last_V_0_ack_in == 1'b1) & (stream_in_24_last_V_0_vld_in == 1'b1))) begin
            stream_in_24_last_V_0_sel_wr <= ~stream_in_24_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_last_V_0_state == 2'd2) & (stream_in_24_last_V_0_vld_in == 1'b0)) | ((stream_in_24_last_V_0_state == 2'd3) & (stream_in_24_last_V_0_vld_in == 1'b0) & (stream_in_24_last_V_0_ack_out == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd2;
        end else if ((((stream_in_24_last_V_0_state == 2'd1) & (stream_in_24_last_V_0_ack_out == 1'b0)) | ((stream_in_24_last_V_0_state == 2'd3) & (stream_in_24_last_V_0_ack_out == 1'b0) & (stream_in_24_last_V_0_vld_in == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_24_last_V_0_vld_in == 1'b0) & (stream_in_24_last_V_0_ack_out == 1'b1)) & ~((stream_in_24_last_V_0_ack_out == 1'b0) & (stream_in_24_last_V_0_vld_in == 1'b1)) & (stream_in_24_last_V_0_state == 2'd3)) | ((stream_in_24_last_V_0_state == 2'd1) & (stream_in_24_last_V_0_ack_out == 1'b1)) | ((stream_in_24_last_V_0_state == 2'd2) & (stream_in_24_last_V_0_vld_in == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd3;
        end else begin
            stream_in_24_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_user_V_0_ack_out == 1'b1) & (stream_in_24_user_V_0_vld_out == 1'b1))) begin
            stream_in_24_user_V_0_sel_rd <= ~stream_in_24_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_user_V_0_ack_in == 1'b1) & (stream_in_24_user_V_0_vld_in == 1'b1))) begin
            stream_in_24_user_V_0_sel_wr <= ~stream_in_24_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_user_V_0_state == 2'd3) & (stream_in_24_user_V_0_vld_in == 1'b0) & (stream_in_24_user_V_0_ack_out == 1'b1)) | ((stream_in_24_user_V_0_state == 2'd2) & (stream_in_24_user_V_0_vld_in == 1'b0)))) begin
            stream_in_24_user_V_0_state <= 2'd2;
        end else if ((((stream_in_24_user_V_0_state == 2'd1) & (stream_in_24_user_V_0_ack_out == 1'b0)) | ((stream_in_24_user_V_0_state == 2'd3) & (stream_in_24_user_V_0_ack_out == 1'b0) & (stream_in_24_user_V_0_vld_in == 1'b1)))) begin
            stream_in_24_user_V_0_state <= 2'd1;
        end else if ((((stream_in_24_user_V_0_state == 2'd1) & (stream_in_24_user_V_0_ack_out == 1'b1)) | ((stream_in_24_user_V_0_state == 2'd2) & (stream_in_24_user_V_0_vld_in == 1'b1)) | (~((stream_in_24_user_V_0_vld_in == 1'b0) & (stream_in_24_user_V_0_ack_out == 1'b1)) & ~((stream_in_24_user_V_0_ack_out == 1'b0) & (stream_in_24_user_V_0_vld_in == 1'b1)) & (stream_in_24_user_V_0_state == 2'd3)))) begin
            stream_in_24_user_V_0_state <= 2'd3;
        end else begin
            stream_in_24_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_data_1_ack_out == 1'b1) & (stream_out_24_data_1_vld_out == 1'b1))) begin
            stream_out_24_data_1_sel_rd <= ~stream_out_24_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_data_1_ack_in == 1'b1) & (stream_out_24_data_1_vld_in == 1'b1))) begin
            stream_out_24_data_1_sel_wr <= ~stream_out_24_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_data_1_state == 2'd2) & (stream_out_24_data_1_vld_in == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_data_1_vld_in == 1'b0) & (stream_out_24_data_1_ack_out == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd2;
        end else if ((((stream_out_24_data_1_state == 2'd1) & (stream_out_24_data_1_ack_out == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_data_1_ack_out == 1'b0) & (stream_out_24_data_1_vld_in == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd1;
        end else if (((~((stream_out_24_data_1_vld_in == 1'b0) & (stream_out_24_data_1_ack_out == 1'b1)) & ~((stream_out_24_data_1_ack_out == 1'b0) & (stream_out_24_data_1_vld_in == 1'b1)) & (stream_out_24_data_1_state == 2'd3)) | ((stream_out_24_data_1_state == 2'd1) & (stream_out_24_data_1_ack_out == 1'b1)) | ((stream_out_24_data_1_state == 2'd2) & (stream_out_24_data_1_vld_in == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd3;
        end else begin
            stream_out_24_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_out == 1'b1) & (stream_out_24_last_V_1_vld_out == 1'b1))) begin
            stream_out_24_last_V_1_sel_rd <= ~stream_out_24_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_in == 1'b1) & (stream_out_24_last_V_1_vld_in == 1'b1))) begin
            stream_out_24_last_V_1_sel_wr <= ~stream_out_24_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd2;
        end else if ((((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_ack_out == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)) & ~((stream_out_24_last_V_1_ack_out == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)) & (stream_out_24_last_V_1_state == 2'd3)) | ((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b1)) | ((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd3;
        end else begin
            stream_out_24_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_out == 1'b1) & (stream_out_24_user_V_1_vld_out == 1'b1))) begin
            stream_out_24_user_V_1_sel_rd <= ~stream_out_24_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_in == 1'b1) & (stream_out_24_user_V_1_vld_in == 1'b1))) begin
            stream_out_24_user_V_1_sel_wr <= ~stream_out_24_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd2;
        end else if ((((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_ack_out == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)) & ~((stream_out_24_user_V_1_ack_out == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)) & (stream_out_24_user_V_1_state == 2'd3)) | ((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b1)) | ((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd3;
        end else begin
            stream_out_24_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c1_V_0_vld_reg == 1'b1)))) begin
        bias_c1_V_0_data_reg <= bias_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_V_read_reg_934 <= bias_c1_V_0_data_reg;
        bias_c2_V_read_reg_929 <= bias_c2_V_0_data_reg;
        bias_c3_V_read_reg_924 <= bias_c3_V_0_data_reg;
        c1_c3_V_read_reg_949 <= c1_c3_V_0_data_reg;
        c2_c3_V_read_reg_944 <= c2_c3_V_0_data_reg;
        c3_c3_V_read_reg_939 <= c3_c3_V_0_data_reg;
        loc_V_2_reg_964 <= {{stream_in_24_data_0_data_out[23:16]}};
        stream_in_24_last_V_s_reg_959 <= stream_in_24_last_V_0_data_out;
        stream_in_24_user_V_s_reg_954 <= stream_in_24_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c2_V_0_vld_reg == 1'b1)))) begin
        bias_c2_V_0_data_reg <= bias_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c3_V_0_vld_reg == 1'b1)))) begin
        bias_c3_V_0_data_reg <= bias_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c1_V_0_vld_reg == 1'b1)))) begin
        c1_c1_V_0_data_reg <= c1_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c2_V_0_vld_reg == 1'b1)))) begin
        c1_c2_V_0_data_reg <= c1_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c3_V_0_vld_reg == 1'b1)))) begin
        c1_c3_V_0_data_reg <= c1_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c1_V_0_vld_reg == 1'b1)))) begin
        c2_c1_V_0_data_reg <= c2_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c2_V_0_vld_reg == 1'b1)))) begin
        c2_c2_V_0_data_reg <= c2_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c3_V_0_vld_reg == 1'b1)))) begin
        c2_c3_V_0_data_reg <= c2_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c1_V_0_vld_reg == 1'b1)))) begin
        c3_c1_V_0_data_reg <= c3_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c2_V_0_vld_reg == 1'b1)))) begin
        c3_c2_V_0_data_reg <= c3_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c3_V_0_vld_reg == 1'b1)))) begin
        c3_c3_V_0_data_reg <= c3_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_38_i1_reg_1020 <= p_38_i1_fu_546_p2;
        p_38_i2_reg_1044 <= p_38_i2_fu_673_p2;
        p_38_i_reg_996 <= p_38_i_fu_419_p2;
        p_39_demorgan_i1_reg_1026 <= p_39_demorgan_i1_fu_552_p2;
        p_39_demorgan_i2_reg_1050 <= p_39_demorgan_i2_fu_679_p2;
        p_39_demorgan_i_reg_1002 <= p_39_demorgan_i_fu_425_p2;
        p_Val2_15_reg_1014 <= p_Val2_15_fu_490_p2;
        p_Val2_23_reg_1038 <= p_Val2_23_fu_617_p2;
        p_Val2_7_reg_990 <= p_Val2_7_fu_363_p2;
        signbit_1_reg_1008 <= p_Val2_13_fu_448_p2[32'd19];
        signbit_2_reg_1032 <= p_Val2_21_fu_575_p2[32'd19];
        signbit_reg_984 <= p_Val2_5_fu_321_p2[32'd19];
        stream_in_24_last_V_s_reg_959_pp0_iter2_reg <= stream_in_24_last_V_s_reg_959;
        stream_in_24_user_V_s_reg_954_pp0_iter2_reg <= stream_in_24_user_V_s_reg_954;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_11_reg_974 <= grp_fu_878_p3;
        p_Val2_19_reg_979 <= grp_fu_886_p3;
        p_Val2_2_reg_969 <= grp_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_data_0_load_A == 1'b1)) begin
        stream_in_24_data_0_payload_A <= stream_in_24_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_data_0_load_B == 1'b1)) begin
        stream_in_24_data_0_payload_B <= stream_in_24_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_last_V_0_load_A == 1'b1)) begin
        stream_in_24_last_V_0_payload_A <= stream_in_24_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_last_V_0_load_B == 1'b1)) begin
        stream_in_24_last_V_0_payload_B <= stream_in_24_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_user_V_0_load_A == 1'b1)) begin
        stream_in_24_user_V_0_payload_A <= stream_in_24_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_user_V_0_load_B == 1'b1)) begin
        stream_in_24_user_V_0_payload_B <= stream_in_24_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_1_load_A == 1'b1)) begin
        stream_out_24_data_1_payload_A <= stream_out_24_data_t_fu_859_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_1_load_B == 1'b1)) begin
        stream_out_24_data_1_payload_B <= stream_out_24_data_t_fu_859_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_A == 1'b1)) begin
        stream_out_24_last_V_1_payload_A <= stream_in_24_last_V_s_reg_959_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_B == 1'b1)) begin
        stream_out_24_last_V_1_payload_B <= stream_in_24_last_V_s_reg_959_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_A == 1'b1)) begin
        stream_out_24_user_V_1_payload_A <= stream_in_24_user_V_s_reg_954_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_B == 1'b1)) begin
        stream_out_24_user_V_1_payload_B <= stream_in_24_user_V_s_reg_954_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_V_0_ack_out = 1'b1;
    end else begin
        bias_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c2_V_0_ack_out = 1'b1;
    end else begin
        bias_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c3_V_0_ack_out = 1'b1;
    end else begin
        bias_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_c1_V_0_ack_out = 1'b1;
    end else begin
        c1_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_c2_V_0_ack_out = 1'b1;
    end else begin
        c1_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c1_c3_V_0_ack_out = 1'b1;
    end else begin
        c1_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_c1_V_0_ack_out = 1'b1;
    end else begin
        c2_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_c2_V_0_ack_out = 1'b1;
    end else begin
        c2_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_c3_V_0_ack_out = 1'b1;
    end else begin
        c2_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_c1_V_0_ack_out = 1'b1;
    end else begin
        c3_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_c2_V_0_ack_out = 1'b1;
    end else begin
        c3_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c3_c3_V_0_ack_out = 1'b1;
    end else begin
        c3_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_TDATA_blk_n = stream_in_24_data_0_state[1'd0];
    end else begin
        stream_in_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_data_0_ack_out = 1'b1;
    end else begin
        stream_in_24_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_data_0_sel == 1'b1)) begin
        stream_in_24_data_0_data_out = stream_in_24_data_0_payload_B;
    end else begin
        stream_in_24_data_0_data_out = stream_in_24_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_24_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_last_V_0_sel == 1'b1)) begin
        stream_in_24_last_V_0_data_out = stream_in_24_last_V_0_payload_B;
    end else begin
        stream_in_24_last_V_0_data_out = stream_in_24_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_24_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_user_V_0_sel == 1'b1)) begin
        stream_in_24_user_V_0_data_out = stream_in_24_user_V_0_payload_B;
    end else begin
        stream_in_24_user_V_0_data_out = stream_in_24_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_data_1_state[1'd1];
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_24_data_1_sel == 1'b1)) begin
        stream_out_24_data_1_data_out = stream_out_24_data_1_payload_B;
    end else begin
        stream_out_24_data_1_data_out = stream_out_24_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_out_24_data_1_vld_in = 1'b1;
    end else begin
        stream_out_24_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_last_V_1_sel == 1'b1)) begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_B;
    end else begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_out_24_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_user_V_1_sel == 1'b1)) begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_B;
    end else begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        stream_out_24_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_247_p1 = loc_V_1_fu_219_p4;

assign OP1_V_2_fu_301_p1 = loc_V_2_reg_964;

assign OP1_V_fu_239_p1 = loc_V_fu_215_p1;

assign Range1_all_ones_1_fu_526_p2 = ((tmp_15_fu_516_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_2_fu_653_p2 = ((tmp_24_fu_643_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_399_p2 = ((tmp_2_fu_389_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_532_p2 = ((tmp_15_fu_516_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_fu_659_p2 = ((tmp_24_fu_643_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_405_p2 = ((tmp_2_fu_389_p4 == 4'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0))) | ((stream_in_24_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0))) | ((stream_out_24_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((stream_in_24_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0))) | ((stream_out_24_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((stream_in_24_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (stream_in_24_data_0_vld_out == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((stream_out_24_last_V_1_ack_in == 1'b0) | (stream_out_24_user_V_1_ack_in == 1'b0) | (stream_out_24_data_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_control_inv = ~ap_rst_n_control;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge1_fu_773_p2 = (p_39_demorgan_i461_no_fu_768_p2 | neg_src_not_fu_758_p2);

assign brmerge2_fu_831_p2 = (p_39_demorgan_i482_no_fu_826_p2 | neg_src_6_not_fu_816_p2);

assign brmerge_fu_715_p2 = (p_39_demorgan_i_not_fu_710_p2 | neg_src_5_not_fu_700_p2);

assign brmerge_i_i463_not_fu_763_p2 = (p_39_demorgan_i1_reg_1026 & neg_src_not_fu_758_p2);

assign brmerge_i_i484_not_fu_821_p2 = (p_39_demorgan_i2_reg_1050 & neg_src_6_not_fu_816_p2);

assign brmerge_i_i_not_fu_705_p2 = (p_39_demorgan_i_reg_1002 & neg_src_5_not_fu_700_p2);

assign carry_1_fu_510_p2 = (tmp_33_fu_482_p3 & tmp_14_fu_504_p2);

assign carry_2_fu_637_p2 = (tmp_37_fu_609_p3 & tmp_23_fu_631_p2);

assign carry_fu_383_p2 = (tmp_5_fu_377_p2 & tmp_29_fu_355_p3);

assign deleted_zeros_1_fu_538_p3 = ((carry_1_fu_510_p2[0:0] === 1'b1) ? Range1_all_ones_1_fu_526_p2 : Range1_all_zeros_1_fu_532_p2);

assign deleted_zeros_2_fu_665_p3 = ((carry_2_fu_637_p2[0:0] === 1'b1) ? Range1_all_ones_2_fu_653_p2 : Range1_all_zeros_2_fu_659_p2);

assign deleted_zeros_fu_411_p3 = ((carry_fu_383_p2[0:0] === 1'b1) ? Range1_all_ones_fu_399_p2 : Range1_all_zeros_fu_405_p2);

assign grp_fu_870_p0 = OP1_V_fu_239_p1;

assign grp_fu_878_p0 = OP1_V_fu_239_p1;

assign grp_fu_886_p0 = OP1_V_fu_239_p1;

assign grp_fu_894_p0 = OP1_V_2_fu_301_p1;

assign grp_fu_904_p0 = OP1_V_2_fu_301_p1;

assign grp_fu_914_p0 = OP1_V_2_fu_301_p1;

assign loc_V_1_fu_219_p4 = {{stream_in_24_data_0_data_out[15:8]}};

assign loc_V_fu_215_p1 = stream_in_24_data_0_data_out[7:0];

assign neg_src_5_not_fu_700_p2 = (signbit_not_fu_695_p2 | p_38_i_reg_996);

assign neg_src_6_fu_748_p2 = (tmp_16_fu_743_p2 & signbit_1_reg_1008);

assign neg_src_6_not_fu_816_p2 = (signbit_2_not_fu_811_p2 | p_38_i2_reg_1044);

assign neg_src_7_fu_806_p2 = (tmp_25_fu_801_p2 & signbit_2_reg_1032);

assign neg_src_fu_690_p2 = (tmp_8_fu_685_p2 & signbit_reg_984);

assign neg_src_not_fu_758_p2 = (signbit_1_not_fu_753_p2 | p_38_i1_reg_1020);

assign out1_V_fu_735_p3 = ((brmerge_fu_715_p2[0:0] === 1'b1) ? p_mux_fu_721_p3 : p_s_fu_728_p3);

assign out2_V_fu_793_p3 = ((brmerge1_fu_773_p2[0:0] === 1'b1) ? p_mux1_fu_779_p3 : p_1_fu_786_p3);

assign out3_V_fu_851_p3 = ((brmerge2_fu_831_p2[0:0] === 1'b1) ? p_mux2_fu_837_p3 : p_2_fu_844_p3);

assign p_1_fu_786_p3 = ((neg_src_6_fu_748_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_15_reg_1014);

assign p_2_fu_844_p3 = ((neg_src_7_fu_806_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_23_reg_1038);

assign p_38_i1_fu_546_p2 = (carry_1_fu_510_p2 & Range1_all_ones_1_fu_526_p2);

assign p_38_i2_fu_673_p2 = (carry_2_fu_637_p2 & Range1_all_ones_2_fu_653_p2);

assign p_38_i_fu_419_p2 = (carry_fu_383_p2 & Range1_all_ones_fu_399_p2);

assign p_39_demorgan_i1_fu_552_p2 = (signbit_1_fu_453_p3 | deleted_zeros_1_fu_538_p3);

assign p_39_demorgan_i2_fu_679_p2 = (signbit_2_fu_580_p3 | deleted_zeros_2_fu_665_p3);

assign p_39_demorgan_i461_no_fu_768_p2 = (p_39_demorgan_i1_reg_1026 ^ 1'd1);

assign p_39_demorgan_i482_no_fu_826_p2 = (p_39_demorgan_i2_reg_1050 ^ 1'd1);

assign p_39_demorgan_i_fu_425_p2 = (signbit_fu_326_p3 | deleted_zeros_fu_411_p3);

assign p_39_demorgan_i_not_fu_710_p2 = (p_39_demorgan_i_reg_1002 ^ 1'd1);

assign p_Val2_13_fu_448_p2 = ($signed(grp_fu_904_p3) + $signed(tmp_16_cast_fu_444_p1));

assign p_Val2_14_fu_461_p4 = {{p_Val2_13_fu_448_p2[15:8]}};

assign p_Val2_15_fu_490_p2 = (tmp_13_fu_478_p1 + p_Val2_14_fu_461_p4);

assign p_Val2_16_fu_291_p0 = OP1_V_1_fu_247_p1;

assign p_Val2_16_fu_291_p1 = c3_c2_V_0_data_reg;

assign p_Val2_16_fu_291_p2 = ($signed({{1'b0}, {p_Val2_16_fu_291_p0}}) * $signed(p_Val2_16_fu_291_p1));

assign p_Val2_1_fu_255_p0 = OP1_V_1_fu_247_p1;

assign p_Val2_1_fu_255_p1 = c1_c2_V_0_data_reg;

assign p_Val2_1_fu_255_p2 = ($signed({{1'b0}, {p_Val2_1_fu_255_p0}}) * $signed(p_Val2_1_fu_255_p1));

assign p_Val2_21_fu_575_p2 = ($signed(grp_fu_914_p3) + $signed(tmp_27_cast_fu_571_p1));

assign p_Val2_22_fu_588_p4 = {{p_Val2_21_fu_575_p2[15:8]}};

assign p_Val2_23_fu_617_p2 = (tmp_22_fu_605_p1 + p_Val2_22_fu_588_p4);

assign p_Val2_5_fu_321_p2 = ($signed(grp_fu_894_p3) + $signed(tmp_3_cast_fu_317_p1));

assign p_Val2_6_fu_334_p4 = {{p_Val2_5_fu_321_p2[15:8]}};

assign p_Val2_7_fu_363_p2 = (tmp_7_fu_351_p1 + p_Val2_6_fu_334_p4);

assign p_Val2_9_fu_273_p0 = OP1_V_1_fu_247_p1;

assign p_Val2_9_fu_273_p1 = c2_c2_V_0_data_reg;

assign p_Val2_9_fu_273_p2 = ($signed({{1'b0}, {p_Val2_9_fu_273_p0}}) * $signed(p_Val2_9_fu_273_p1));

assign p_mux1_fu_779_p3 = ((brmerge_i_i463_not_fu_763_p2[0:0] === 1'b1) ? p_Val2_15_reg_1014 : 8'd255);

assign p_mux2_fu_837_p3 = ((brmerge_i_i484_not_fu_821_p2[0:0] === 1'b1) ? p_Val2_23_reg_1038 : 8'd255);

assign p_mux_fu_721_p3 = ((brmerge_i_i_not_fu_705_p2[0:0] === 1'b1) ? p_Val2_7_reg_990 : 8'd255);

assign p_s_fu_728_p3 = ((neg_src_fu_690_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_7_reg_990);

assign signbit_1_fu_453_p3 = p_Val2_13_fu_448_p2[32'd19];

assign signbit_1_not_fu_753_p2 = (signbit_1_reg_1008 ^ 1'd1);

assign signbit_2_fu_580_p3 = p_Val2_21_fu_575_p2[32'd19];

assign signbit_2_not_fu_811_p2 = (signbit_2_reg_1032 ^ 1'd1);

assign signbit_fu_326_p3 = p_Val2_5_fu_321_p2[32'd19];

assign signbit_not_fu_695_p2 = (signbit_reg_984 ^ 1'd1);

assign stream_in_24_TREADY = stream_in_24_last_V_0_state[1'd1];

assign stream_in_24_data_0_ack_in = stream_in_24_data_0_state[1'd1];

assign stream_in_24_data_0_load_A = (stream_in_24_data_0_state_cmp_full & ~stream_in_24_data_0_sel_wr);

assign stream_in_24_data_0_load_B = (stream_in_24_data_0_state_cmp_full & stream_in_24_data_0_sel_wr);

assign stream_in_24_data_0_sel = stream_in_24_data_0_sel_rd;

assign stream_in_24_data_0_state_cmp_full = ((stream_in_24_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_data_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_data_0_vld_out = stream_in_24_data_0_state[1'd0];

assign stream_in_24_last_V_0_ack_in = stream_in_24_last_V_0_state[1'd1];

assign stream_in_24_last_V_0_load_A = (stream_in_24_last_V_0_state_cmp_full & ~stream_in_24_last_V_0_sel_wr);

assign stream_in_24_last_V_0_load_B = (stream_in_24_last_V_0_state_cmp_full & stream_in_24_last_V_0_sel_wr);

assign stream_in_24_last_V_0_sel = stream_in_24_last_V_0_sel_rd;

assign stream_in_24_last_V_0_state_cmp_full = ((stream_in_24_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_last_V_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_last_V_0_vld_out = stream_in_24_last_V_0_state[1'd0];

assign stream_in_24_user_V_0_ack_in = stream_in_24_user_V_0_state[1'd1];

assign stream_in_24_user_V_0_load_A = (stream_in_24_user_V_0_state_cmp_full & ~stream_in_24_user_V_0_sel_wr);

assign stream_in_24_user_V_0_load_B = (stream_in_24_user_V_0_state_cmp_full & stream_in_24_user_V_0_sel_wr);

assign stream_in_24_user_V_0_sel = stream_in_24_user_V_0_sel_rd;

assign stream_in_24_user_V_0_state_cmp_full = ((stream_in_24_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_user_V_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_user_V_0_vld_out = stream_in_24_user_V_0_state[1'd0];

assign stream_out_24_TDATA = stream_out_24_data_1_data_out;

assign stream_out_24_TLAST = stream_out_24_last_V_1_data_out;

assign stream_out_24_TUSER = stream_out_24_user_V_1_data_out;

assign stream_out_24_TVALID = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_data_1_ack_in = stream_out_24_data_1_state[1'd1];

assign stream_out_24_data_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_data_1_load_A = (stream_out_24_data_1_state_cmp_full & ~stream_out_24_data_1_sel_wr);

assign stream_out_24_data_1_load_B = (stream_out_24_data_1_state_cmp_full & stream_out_24_data_1_sel_wr);

assign stream_out_24_data_1_sel = stream_out_24_data_1_sel_rd;

assign stream_out_24_data_1_state_cmp_full = ((stream_out_24_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_data_1_vld_out = stream_out_24_data_1_state[1'd0];

assign stream_out_24_data_t_fu_859_p4 = {{{out3_V_fu_851_p3}, {out2_V_fu_793_p3}}, {out1_V_fu_735_p3}};

assign stream_out_24_last_V_1_ack_in = stream_out_24_last_V_1_state[1'd1];

assign stream_out_24_last_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_last_V_1_load_A = (stream_out_24_last_V_1_state_cmp_full & ~stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_load_B = (stream_out_24_last_V_1_state_cmp_full & stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_sel = stream_out_24_last_V_1_sel_rd;

assign stream_out_24_last_V_1_state_cmp_full = ((stream_out_24_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_last_V_1_vld_out = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_user_V_1_ack_in = stream_out_24_user_V_1_state[1'd1];

assign stream_out_24_user_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_user_V_1_load_A = (stream_out_24_user_V_1_state_cmp_full & ~stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_load_B = (stream_out_24_user_V_1_state_cmp_full & stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_sel = stream_out_24_user_V_1_sel_rd;

assign stream_out_24_user_V_1_state_cmp_full = ((stream_out_24_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_user_V_1_vld_out = stream_out_24_user_V_1_state[1'd0];

assign tmp_12_fu_437_p3 = {{bias_c2_V_read_reg_929}, {8'd0}};

assign tmp_13_fu_478_p1 = tmp_32_fu_471_p3;

assign tmp_14_fu_504_p2 = (tmp_34_fu_496_p3 ^ 1'd1);

assign tmp_15_fu_516_p4 = {{p_Val2_13_fu_448_p2[19:16]}};

assign tmp_16_cast_fu_444_p1 = $signed(tmp_12_fu_437_p3);

assign tmp_16_fu_743_p2 = (p_38_i1_reg_1020 ^ 1'd1);

assign tmp_21_fu_564_p3 = {{bias_c3_V_read_reg_924}, {8'd0}};

assign tmp_22_fu_605_p1 = tmp_36_fu_598_p3;

assign tmp_23_fu_631_p2 = (tmp_38_fu_623_p3 ^ 1'd1);

assign tmp_24_fu_643_p4 = {{p_Val2_21_fu_575_p2[19:16]}};

assign tmp_25_fu_801_p2 = (p_38_i2_reg_1044 ^ 1'd1);

assign tmp_27_cast_fu_571_p1 = $signed(tmp_21_fu_564_p3);

assign tmp_28_fu_344_p3 = grp_fu_894_p3[32'd7];

assign tmp_29_fu_355_p3 = p_Val2_5_fu_321_p2[32'd15];

assign tmp_2_fu_389_p4 = {{p_Val2_5_fu_321_p2[19:16]}};

assign tmp_30_fu_369_p3 = p_Val2_7_fu_363_p2[32'd7];

assign tmp_32_fu_471_p3 = grp_fu_904_p3[32'd7];

assign tmp_33_fu_482_p3 = p_Val2_13_fu_448_p2[32'd15];

assign tmp_34_fu_496_p3 = p_Val2_15_fu_490_p2[32'd7];

assign tmp_36_fu_598_p3 = grp_fu_914_p3[32'd7];

assign tmp_37_fu_609_p3 = p_Val2_21_fu_575_p2[32'd15];

assign tmp_38_fu_623_p3 = p_Val2_23_fu_617_p2[32'd7];

assign tmp_3_cast_fu_317_p1 = $signed(tmp_3_fu_310_p3);

assign tmp_3_fu_310_p3 = {{bias_c1_V_read_reg_934}, {8'd0}};

assign tmp_5_fu_377_p2 = (tmp_30_fu_369_p3 ^ 1'd1);

assign tmp_7_fu_351_p1 = tmp_28_fu_344_p3;

assign tmp_8_fu_685_p2 = (p_38_i_reg_996 ^ 1'd1);

endmodule //color_convert
