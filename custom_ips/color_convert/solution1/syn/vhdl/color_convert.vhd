-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_convert is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_24_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_24_TVALID : IN STD_LOGIC;
    stream_in_24_TREADY : OUT STD_LOGIC;
    stream_in_24_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_24_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_24_TVALID : OUT STD_LOGIC;
    stream_out_24_TREADY : IN STD_LOGIC;
    stream_out_24_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    control : IN STD_LOGIC;
    ap_rst_n_control : IN STD_LOGIC );
end;


architecture behav of color_convert is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_convert,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=5.698000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=763,HLS_SYN_LUT=1096,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal stream_in_24_data_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_data_0_vld_in : STD_LOGIC;
    signal stream_in_24_data_0_vld_out : STD_LOGIC;
    signal stream_in_24_data_0_ack_in : STD_LOGIC;
    signal stream_in_24_data_0_ack_out : STD_LOGIC;
    signal stream_in_24_data_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_data_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_data_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_24_data_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_24_data_0_sel : STD_LOGIC;
    signal stream_in_24_data_0_load_A : STD_LOGIC;
    signal stream_in_24_data_0_load_B : STD_LOGIC;
    signal stream_in_24_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_24_data_0_state_cmp_full : STD_LOGIC;
    signal stream_in_24_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_24_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_24_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_24_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_24_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_24_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_24_user_V_0_sel : STD_LOGIC;
    signal stream_in_24_user_V_0_load_A : STD_LOGIC;
    signal stream_in_24_user_V_0_load_B : STD_LOGIC;
    signal stream_in_24_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_24_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_24_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_24_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_24_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_24_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_24_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_24_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_24_last_V_0_sel : STD_LOGIC;
    signal stream_in_24_last_V_0_load_A : STD_LOGIC;
    signal stream_in_24_last_V_0_load_B : STD_LOGIC;
    signal stream_in_24_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_24_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_24_data_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_data_1_vld_in : STD_LOGIC;
    signal stream_out_24_data_1_vld_out : STD_LOGIC;
    signal stream_out_24_data_1_ack_in : STD_LOGIC;
    signal stream_out_24_data_1_ack_out : STD_LOGIC;
    signal stream_out_24_data_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_data_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_data_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_24_data_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_24_data_1_sel : STD_LOGIC;
    signal stream_out_24_data_1_load_A : STD_LOGIC;
    signal stream_out_24_data_1_load_B : STD_LOGIC;
    signal stream_out_24_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_24_data_1_state_cmp_full : STD_LOGIC;
    signal stream_out_24_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_24_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_24_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_24_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_24_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_24_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_24_user_V_1_sel : STD_LOGIC;
    signal stream_out_24_user_V_1_load_A : STD_LOGIC;
    signal stream_out_24_user_V_1_load_B : STD_LOGIC;
    signal stream_out_24_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_24_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_24_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_24_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_24_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_24_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_24_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_24_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_24_last_V_1_sel : STD_LOGIC;
    signal stream_out_24_last_V_1_load_A : STD_LOGIC;
    signal stream_out_24_last_V_1_load_B : STD_LOGIC;
    signal stream_out_24_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_24_last_V_1_state_cmp_full : STD_LOGIC;
    signal c1_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal c1_c1_V_0_ack_out : STD_LOGIC;
    signal c1_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal c1_c2_V_0_ack_out : STD_LOGIC;
    signal c1_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal c1_c3_V_0_ack_out : STD_LOGIC;
    signal c2_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal c2_c1_V_0_ack_out : STD_LOGIC;
    signal c2_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal c2_c2_V_0_ack_out : STD_LOGIC;
    signal c2_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal c2_c3_V_0_ack_out : STD_LOGIC;
    signal c3_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal c3_c1_V_0_ack_out : STD_LOGIC;
    signal c3_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal c3_c2_V_0_ack_out : STD_LOGIC;
    signal c3_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal c3_c3_V_0_ack_out : STD_LOGIC;
    signal bias_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal bias_c1_V_0_ack_out : STD_LOGIC;
    signal bias_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal bias_c2_V_0_ack_out : STD_LOGIC;
    signal bias_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal bias_c3_V_0_ack_out : STD_LOGIC;
    signal stream_in_24_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_24_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_rst_n_control_inv : STD_LOGIC;
    signal bias_c3_V_read_reg_924 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bias_c2_V_read_reg_929 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_V_read_reg_934 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_V_read_reg_939 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_V_read_reg_944 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_V_read_reg_949 : STD_LOGIC_VECTOR (9 downto 0);
    signal stream_in_24_user_V_s_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_s_reg_954_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_959_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal loc_V_2_reg_964 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_2_reg_969 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_878_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_11_reg_974 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_886_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_19_reg_979 : STD_LOGIC_VECTOR (18 downto 0);
    signal signbit_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_38_i_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_1_fu_453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_1_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_15_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_38_i1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i1_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i1_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_2_fu_580_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_2_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_23_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_23_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_38_i2_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i2_reg_1044 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i2_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i2_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_data_t_fu_859_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal loc_V_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_1_fu_219_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_255_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP1_V_1_fu_247_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_fu_255_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_1_fu_255_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_9_fu_273_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_9_fu_273_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_9_fu_273_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_16_fu_291_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_16_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_16_fu_291_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_310_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_894_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_cast_fu_317_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_5_fu_321_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_Val2_5_fu_321_p2 : signal is "no";
    signal tmp_28_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_351_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_6_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_389_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_411_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_437_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_904_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_cast_fu_444_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_13_fu_448_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of p_Val2_13_fu_448_p2 : signal is "no";
    signal tmp_32_fu_471_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_14_fu_461_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_516_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_1_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_564_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_914_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_27_cast_fu_571_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_21_fu_575_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of p_Val2_21_fu_575_p2 : signal is "no";
    signal tmp_36_fu_598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_fu_588_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_643_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_2_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_2_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_2_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_not_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_5_not_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_not_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_not_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_721_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_728_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_1_not_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_not_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i461_no_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i463_not_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_6_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux1_fu_779_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_786_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_2_not_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_6_not_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i482_no_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i484_not_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_7_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux2_fu_837_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_844_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out3_V_fu_851_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out2_V_fu_793_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out1_V_fu_735_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP1_V_fu_239_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_878_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_886_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_894_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP1_V_2_fu_301_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_904_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_914_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component color_convert_macbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component color_convert_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component color_convert_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        c1_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    color_convert_AXILiteS_s_axi_U : component color_convert_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => control,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        c1_c1_V => c1_c1_V,
        c1_c2_V => c1_c2_V,
        c1_c3_V => c1_c3_V,
        c2_c1_V => c2_c1_V,
        c2_c2_V => c2_c2_V,
        c2_c3_V => c2_c3_V,
        c3_c1_V => c3_c1_V,
        c3_c2_V => c3_c2_V,
        c3_c3_V => c3_c3_V,
        bias_c1_V => bias_c1_V,
        bias_c2_V => bias_c2_V,
        bias_c3_V => bias_c3_V,
        clk => ap_clk,
        rst => ap_rst_n_control_inv);

    color_convert_macbkb_U1 : component color_convert_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_870_p0,
        din1 => c1_c1_V_0_data_reg,
        din2 => p_Val2_1_fu_255_p2,
        dout => grp_fu_870_p3);

    color_convert_macbkb_U2 : component color_convert_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_878_p0,
        din1 => c2_c1_V_0_data_reg,
        din2 => p_Val2_9_fu_273_p2,
        dout => grp_fu_878_p3);

    color_convert_macbkb_U3 : component color_convert_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_886_p0,
        din1 => c3_c1_V_0_data_reg,
        din2 => p_Val2_16_fu_291_p2,
        dout => grp_fu_886_p3);

    color_convert_maccud_U4 : component color_convert_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_894_p0,
        din1 => c1_c3_V_read_reg_949,
        din2 => p_Val2_2_reg_969,
        dout => grp_fu_894_p3);

    color_convert_maccud_U5 : component color_convert_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_904_p0,
        din1 => c2_c3_V_read_reg_944,
        din2 => p_Val2_11_reg_974,
        dout => grp_fu_904_p3);

    color_convert_maccud_U6 : component color_convert_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_914_p0,
        din1 => c3_c3_V_read_reg_939,
        din2 => p_Val2_19_reg_979,
        dout => grp_fu_914_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_24_data_0_ack_out = ap_const_logic_1) and (stream_in_24_data_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_24_data_0_sel_rd <= not(stream_in_24_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_24_data_0_ack_in = ap_const_logic_1) and (stream_in_24_data_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_24_data_0_sel_wr <= not(stream_in_24_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_data_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_24_data_0_vld_in = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_2)) or ((stream_in_24_data_0_vld_in = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_3) and (stream_in_24_data_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_24_data_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_24_data_0_ack_out = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_1)) or ((stream_in_24_data_0_ack_out = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_3) and (stream_in_24_data_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_data_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_24_data_0_vld_in = ap_const_logic_0) and (stream_in_24_data_0_ack_out = ap_const_logic_1))) and not(((stream_in_24_data_0_ack_out = ap_const_logic_0) and (stream_in_24_data_0_vld_in = ap_const_logic_1))) and (stream_in_24_data_0_state = ap_const_lv2_3)) or ((stream_in_24_data_0_state = ap_const_lv2_1) and (stream_in_24_data_0_ack_out = ap_const_logic_1)) or ((stream_in_24_data_0_state = ap_const_lv2_2) and (stream_in_24_data_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_data_0_state <= ap_const_lv2_3;
                else 
                    stream_in_24_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_24_last_V_0_ack_out = ap_const_logic_1) and (stream_in_24_last_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_24_last_V_0_sel_rd <= not(stream_in_24_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_24_last_V_0_ack_in = ap_const_logic_1) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_24_last_V_0_sel_wr <= not(stream_in_24_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_24_last_V_0_state = ap_const_lv2_2) and (stream_in_24_last_V_0_vld_in = ap_const_logic_0)) or ((stream_in_24_last_V_0_state = ap_const_lv2_3) and (stream_in_24_last_V_0_vld_in = ap_const_logic_0) and (stream_in_24_last_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_24_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_24_last_V_0_state = ap_const_lv2_1) and (stream_in_24_last_V_0_ack_out = ap_const_logic_0)) or ((stream_in_24_last_V_0_state = ap_const_lv2_3) and (stream_in_24_last_V_0_ack_out = ap_const_logic_0) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_24_last_V_0_vld_in = ap_const_logic_0) and (stream_in_24_last_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_24_last_V_0_ack_out = ap_const_logic_0) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1))) and (stream_in_24_last_V_0_state = ap_const_lv2_3)) or ((stream_in_24_last_V_0_state = ap_const_lv2_1) and (stream_in_24_last_V_0_ack_out = ap_const_logic_1)) or ((stream_in_24_last_V_0_state = ap_const_lv2_2) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_24_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_24_user_V_0_ack_out = ap_const_logic_1) and (stream_in_24_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_24_user_V_0_sel_rd <= not(stream_in_24_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_24_user_V_0_ack_in = ap_const_logic_1) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_24_user_V_0_sel_wr <= not(stream_in_24_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_24_user_V_0_state = ap_const_lv2_3) and (stream_in_24_user_V_0_vld_in = ap_const_logic_0) and (stream_in_24_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_24_user_V_0_state = ap_const_lv2_2) and (stream_in_24_user_V_0_vld_in = ap_const_logic_0)))) then 
                    stream_in_24_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_24_user_V_0_state = ap_const_lv2_1) and (stream_in_24_user_V_0_ack_out = ap_const_logic_0)) or ((stream_in_24_user_V_0_state = ap_const_lv2_3) and (stream_in_24_user_V_0_ack_out = ap_const_logic_0) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_user_V_0_state <= ap_const_lv2_1;
                elsif ((((stream_in_24_user_V_0_state = ap_const_lv2_1) and (stream_in_24_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_24_user_V_0_state = ap_const_lv2_2) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1)) or (not(((stream_in_24_user_V_0_vld_in = ap_const_logic_0) and (stream_in_24_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_24_user_V_0_ack_out = ap_const_logic_0) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_24_user_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_24_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_24_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_24_data_1_ack_out = ap_const_logic_1) and (stream_out_24_data_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_24_data_1_sel_rd <= not(stream_out_24_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_24_data_1_ack_in = ap_const_logic_1) and (stream_out_24_data_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_24_data_1_sel_wr <= not(stream_out_24_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_data_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_24_data_1_state = ap_const_lv2_2) and (stream_out_24_data_1_vld_in = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_data_1_vld_in = ap_const_logic_0) and (stream_out_24_data_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_24_data_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_24_data_1_state = ap_const_lv2_1) and (stream_out_24_data_1_ack_out = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_data_1_ack_out = ap_const_logic_0) and (stream_out_24_data_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_data_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_24_data_1_vld_in = ap_const_logic_0) and (stream_out_24_data_1_ack_out = ap_const_logic_1))) and not(((stream_out_24_data_1_ack_out = ap_const_logic_0) and (stream_out_24_data_1_vld_in = ap_const_logic_1))) and (stream_out_24_data_1_state = ap_const_lv2_3)) or ((stream_out_24_data_1_state = ap_const_lv2_1) and (stream_out_24_data_1_ack_out = ap_const_logic_1)) or ((stream_out_24_data_1_state = ap_const_lv2_2) and (stream_out_24_data_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_data_1_state <= ap_const_lv2_3;
                else 
                    stream_out_24_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_24_last_V_1_ack_out = ap_const_logic_1) and (stream_out_24_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_24_last_V_1_sel_rd <= not(stream_out_24_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_24_last_V_1_ack_in = ap_const_logic_1) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_24_last_V_1_sel_wr <= not(stream_out_24_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_24_last_V_1_state = ap_const_lv2_2) and (stream_out_24_last_V_1_vld_in = ap_const_logic_0)) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_last_V_1_vld_in = ap_const_logic_0) and (stream_out_24_last_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_24_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_24_last_V_1_state = ap_const_lv2_1) and (stream_out_24_last_V_1_ack_out = ap_const_logic_0)) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_last_V_1_ack_out = ap_const_logic_0) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_24_last_V_1_vld_in = ap_const_logic_0) and (stream_out_24_last_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_24_last_V_1_ack_out = ap_const_logic_0) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1))) and (stream_out_24_last_V_1_state = ap_const_lv2_3)) or ((stream_out_24_last_V_1_state = ap_const_lv2_1) and (stream_out_24_last_V_1_ack_out = ap_const_logic_1)) or ((stream_out_24_last_V_1_state = ap_const_lv2_2) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_24_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_24_user_V_1_ack_out = ap_const_logic_1) and (stream_out_24_user_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_24_user_V_1_sel_rd <= not(stream_out_24_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_24_user_V_1_ack_in = ap_const_logic_1) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_24_user_V_1_sel_wr <= not(stream_out_24_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_24_user_V_1_state = ap_const_lv2_2) and (stream_out_24_user_V_1_vld_in = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_user_V_1_vld_in = ap_const_logic_0) and (stream_out_24_user_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_24_user_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_24_user_V_1_state = ap_const_lv2_1) and (stream_out_24_user_V_1_ack_out = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_user_V_1_ack_out = ap_const_logic_0) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_24_user_V_1_vld_in = ap_const_logic_0) and (stream_out_24_user_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_24_user_V_1_ack_out = ap_const_logic_0) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1))) and (stream_out_24_user_V_1_state = ap_const_lv2_3)) or ((stream_out_24_user_V_1_state = ap_const_lv2_1) and (stream_out_24_user_V_1_ack_out = ap_const_logic_1)) or ((stream_out_24_user_V_1_state = ap_const_lv2_2) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_24_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    bias_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    bias_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    bias_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((bias_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c1_V_0_vld_reg = ap_const_logic_1)))) then
                bias_c1_V_0_data_reg <= bias_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bias_c1_V_read_reg_934 <= bias_c1_V_0_data_reg;
                bias_c2_V_read_reg_929 <= bias_c2_V_0_data_reg;
                bias_c3_V_read_reg_924 <= bias_c3_V_0_data_reg;
                c1_c3_V_read_reg_949 <= c1_c3_V_0_data_reg;
                c2_c3_V_read_reg_944 <= c2_c3_V_0_data_reg;
                c3_c3_V_read_reg_939 <= c3_c3_V_0_data_reg;
                loc_V_2_reg_964 <= stream_in_24_data_0_data_out(23 downto 16);
                stream_in_24_last_V_s_reg_959 <= stream_in_24_last_V_0_data_out;
                stream_in_24_user_V_s_reg_954 <= stream_in_24_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((bias_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c2_V_0_vld_reg = ap_const_logic_1)))) then
                bias_c2_V_0_data_reg <= bias_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((bias_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c3_V_0_vld_reg = ap_const_logic_1)))) then
                bias_c3_V_0_data_reg <= bias_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c1_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c1_V_0_vld_reg = ap_const_logic_1)))) then
                c1_c1_V_0_data_reg <= c1_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c1_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c2_V_0_vld_reg = ap_const_logic_1)))) then
                c1_c2_V_0_data_reg <= c1_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c1_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c3_V_0_vld_reg = ap_const_logic_1)))) then
                c1_c3_V_0_data_reg <= c1_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c2_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c1_V_0_vld_reg = ap_const_logic_1)))) then
                c2_c1_V_0_data_reg <= c2_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c2_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c2_V_0_vld_reg = ap_const_logic_1)))) then
                c2_c2_V_0_data_reg <= c2_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c2_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c3_V_0_vld_reg = ap_const_logic_1)))) then
                c2_c3_V_0_data_reg <= c2_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c3_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c1_V_0_vld_reg = ap_const_logic_1)))) then
                c3_c1_V_0_data_reg <= c3_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c3_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c2_V_0_vld_reg = ap_const_logic_1)))) then
                c3_c2_V_0_data_reg <= c3_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c3_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c3_V_0_vld_reg = ap_const_logic_1)))) then
                c3_c3_V_0_data_reg <= c3_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                p_38_i1_reg_1020 <= p_38_i1_fu_546_p2;
                p_38_i2_reg_1044 <= p_38_i2_fu_673_p2;
                p_38_i_reg_996 <= p_38_i_fu_419_p2;
                p_39_demorgan_i1_reg_1026 <= p_39_demorgan_i1_fu_552_p2;
                p_39_demorgan_i2_reg_1050 <= p_39_demorgan_i2_fu_679_p2;
                p_39_demorgan_i_reg_1002 <= p_39_demorgan_i_fu_425_p2;
                p_Val2_15_reg_1014 <= p_Val2_15_fu_490_p2;
                p_Val2_23_reg_1038 <= p_Val2_23_fu_617_p2;
                p_Val2_7_reg_990 <= p_Val2_7_fu_363_p2;
                signbit_1_reg_1008 <= p_Val2_13_fu_448_p2(19 downto 19);
                signbit_2_reg_1032 <= p_Val2_21_fu_575_p2(19 downto 19);
                signbit_reg_984 <= p_Val2_5_fu_321_p2(19 downto 19);
                stream_in_24_last_V_s_reg_959_pp0_iter2_reg <= stream_in_24_last_V_s_reg_959;
                stream_in_24_user_V_s_reg_954_pp0_iter2_reg <= stream_in_24_user_V_s_reg_954;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_11_reg_974 <= grp_fu_878_p3;
                p_Val2_19_reg_979 <= grp_fu_886_p3;
                p_Val2_2_reg_969 <= grp_fu_870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_data_0_load_A = ap_const_logic_1)) then
                stream_in_24_data_0_payload_A <= stream_in_24_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_data_0_load_B = ap_const_logic_1)) then
                stream_in_24_data_0_payload_B <= stream_in_24_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_last_V_0_load_A = ap_const_logic_1)) then
                stream_in_24_last_V_0_payload_A <= stream_in_24_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_last_V_0_load_B = ap_const_logic_1)) then
                stream_in_24_last_V_0_payload_B <= stream_in_24_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_24_user_V_0_payload_A <= stream_in_24_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_24_user_V_0_payload_B <= stream_in_24_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_data_1_load_A = ap_const_logic_1)) then
                stream_out_24_data_1_payload_A <= stream_out_24_data_t_fu_859_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_data_1_load_B = ap_const_logic_1)) then
                stream_out_24_data_1_payload_B <= stream_out_24_data_t_fu_859_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_last_V_1_load_A = ap_const_logic_1)) then
                stream_out_24_last_V_1_payload_A <= stream_in_24_last_V_s_reg_959_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_last_V_1_load_B = ap_const_logic_1)) then
                stream_out_24_last_V_1_payload_B <= stream_in_24_last_V_s_reg_959_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_user_V_1_load_A = ap_const_logic_1)) then
                stream_out_24_user_V_1_payload_A <= stream_in_24_user_V_s_reg_954_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_user_V_1_load_B = ap_const_logic_1)) then
                stream_out_24_user_V_1_payload_B <= stream_in_24_user_V_s_reg_954_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OP1_V_1_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_1_fu_219_p4),18));
    OP1_V_2_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_2_reg_964),18));
    OP1_V_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_215_p1),18));
    Range1_all_ones_1_fu_526_p2 <= "1" when (tmp_15_fu_516_p4 = ap_const_lv4_F) else "0";
    Range1_all_ones_2_fu_653_p2 <= "1" when (tmp_24_fu_643_p4 = ap_const_lv4_F) else "0";
    Range1_all_ones_fu_399_p2 <= "1" when (tmp_2_fu_389_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_1_fu_532_p2 <= "1" when (tmp_15_fu_516_p4 = ap_const_lv4_0) else "0";
    Range1_all_zeros_2_fu_659_p2 <= "1" when (tmp_24_fu_643_p4 = ap_const_lv4_0) else "0";
    Range1_all_zeros_fu_405_p2 <= "1" when (tmp_2_fu_389_p4 = ap_const_lv4_0) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_24_data_0_vld_out, stream_out_24_data_1_ack_in, stream_out_24_user_V_1_ack_in, stream_out_24_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((stream_out_24_last_V_1_ack_in = ap_const_logic_0) or (stream_out_24_user_V_1_ack_in = ap_const_logic_0) or (stream_out_24_data_1_ack_in = ap_const_logic_0))) or ((stream_in_24_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_24_data_0_vld_out, stream_out_24_data_1_ack_in, stream_out_24_user_V_1_ack_in, stream_out_24_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((stream_out_24_last_V_1_ack_in = ap_const_logic_0) or (stream_out_24_user_V_1_ack_in = ap_const_logic_0) or (stream_out_24_data_1_ack_in = ap_const_logic_0))) or ((stream_out_24_data_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((stream_in_24_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_24_data_0_vld_out, stream_out_24_data_1_ack_in, stream_out_24_user_V_1_ack_in, stream_out_24_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((stream_out_24_last_V_1_ack_in = ap_const_logic_0) or (stream_out_24_user_V_1_ack_in = ap_const_logic_0) or (stream_out_24_data_1_ack_in = ap_const_logic_0))) or ((stream_out_24_data_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((stream_in_24_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_in_24_data_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (stream_in_24_data_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(stream_out_24_data_1_ack_in, stream_out_24_user_V_1_ack_in, stream_out_24_last_V_1_ack_in)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((stream_out_24_last_V_1_ack_in = ap_const_logic_0) or (stream_out_24_user_V_1_ack_in = ap_const_logic_0) or (stream_out_24_data_1_ack_in = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_control_inv_assign_proc : process(ap_rst_n_control)
    begin
                ap_rst_n_control_inv <= not(ap_rst_n_control);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bias_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            bias_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    bias_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            bias_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    bias_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            bias_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_fu_773_p2 <= (p_39_demorgan_i461_no_fu_768_p2 or neg_src_not_fu_758_p2);
    brmerge2_fu_831_p2 <= (p_39_demorgan_i482_no_fu_826_p2 or neg_src_6_not_fu_816_p2);
    brmerge_fu_715_p2 <= (p_39_demorgan_i_not_fu_710_p2 or neg_src_5_not_fu_700_p2);
    brmerge_i_i463_not_fu_763_p2 <= (p_39_demorgan_i1_reg_1026 and neg_src_not_fu_758_p2);
    brmerge_i_i484_not_fu_821_p2 <= (p_39_demorgan_i2_reg_1050 and neg_src_6_not_fu_816_p2);
    brmerge_i_i_not_fu_705_p2 <= (p_39_demorgan_i_reg_1002 and neg_src_5_not_fu_700_p2);

    c1_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c1_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            c1_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c1_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            c1_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c1_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            c1_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c2_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            c2_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c2_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            c2_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c2_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            c2_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c3_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            c3_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c3_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            c3_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            c3_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            c3_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    carry_1_fu_510_p2 <= (tmp_33_fu_482_p3 and tmp_14_fu_504_p2);
    carry_2_fu_637_p2 <= (tmp_37_fu_609_p3 and tmp_23_fu_631_p2);
    carry_fu_383_p2 <= (tmp_5_fu_377_p2 and tmp_29_fu_355_p3);
    deleted_zeros_1_fu_538_p3 <= 
        Range1_all_ones_1_fu_526_p2 when (carry_1_fu_510_p2(0) = '1') else 
        Range1_all_zeros_1_fu_532_p2;
    deleted_zeros_2_fu_665_p3 <= 
        Range1_all_ones_2_fu_653_p2 when (carry_2_fu_637_p2(0) = '1') else 
        Range1_all_zeros_2_fu_659_p2;
    deleted_zeros_fu_411_p3 <= 
        Range1_all_ones_fu_399_p2 when (carry_fu_383_p2(0) = '1') else 
        Range1_all_zeros_fu_405_p2;
    grp_fu_870_p0 <= OP1_V_fu_239_p1(8 - 1 downto 0);
    grp_fu_878_p0 <= OP1_V_fu_239_p1(8 - 1 downto 0);
    grp_fu_886_p0 <= OP1_V_fu_239_p1(8 - 1 downto 0);
    grp_fu_894_p0 <= OP1_V_2_fu_301_p1(8 - 1 downto 0);
    grp_fu_904_p0 <= OP1_V_2_fu_301_p1(8 - 1 downto 0);
    grp_fu_914_p0 <= OP1_V_2_fu_301_p1(8 - 1 downto 0);
    loc_V_1_fu_219_p4 <= stream_in_24_data_0_data_out(15 downto 8);
    loc_V_fu_215_p1 <= stream_in_24_data_0_data_out(8 - 1 downto 0);
    neg_src_5_not_fu_700_p2 <= (signbit_not_fu_695_p2 or p_38_i_reg_996);
    neg_src_6_fu_748_p2 <= (tmp_16_fu_743_p2 and signbit_1_reg_1008);
    neg_src_6_not_fu_816_p2 <= (signbit_2_not_fu_811_p2 or p_38_i2_reg_1044);
    neg_src_7_fu_806_p2 <= (tmp_25_fu_801_p2 and signbit_2_reg_1032);
    neg_src_fu_690_p2 <= (tmp_8_fu_685_p2 and signbit_reg_984);
    neg_src_not_fu_758_p2 <= (signbit_1_not_fu_753_p2 or p_38_i1_reg_1020);
    out1_V_fu_735_p3 <= 
        p_mux_fu_721_p3 when (brmerge_fu_715_p2(0) = '1') else 
        p_s_fu_728_p3;
    out2_V_fu_793_p3 <= 
        p_mux1_fu_779_p3 when (brmerge1_fu_773_p2(0) = '1') else 
        p_1_fu_786_p3;
    out3_V_fu_851_p3 <= 
        p_mux2_fu_837_p3 when (brmerge2_fu_831_p2(0) = '1') else 
        p_2_fu_844_p3;
    p_1_fu_786_p3 <= 
        ap_const_lv8_0 when (neg_src_6_fu_748_p2(0) = '1') else 
        p_Val2_15_reg_1014;
    p_2_fu_844_p3 <= 
        ap_const_lv8_0 when (neg_src_7_fu_806_p2(0) = '1') else 
        p_Val2_23_reg_1038;
    p_38_i1_fu_546_p2 <= (carry_1_fu_510_p2 and Range1_all_ones_1_fu_526_p2);
    p_38_i2_fu_673_p2 <= (carry_2_fu_637_p2 and Range1_all_ones_2_fu_653_p2);
    p_38_i_fu_419_p2 <= (carry_fu_383_p2 and Range1_all_ones_fu_399_p2);
    p_39_demorgan_i1_fu_552_p2 <= (signbit_1_fu_453_p3 or deleted_zeros_1_fu_538_p3);
    p_39_demorgan_i2_fu_679_p2 <= (signbit_2_fu_580_p3 or deleted_zeros_2_fu_665_p3);
    p_39_demorgan_i461_no_fu_768_p2 <= (p_39_demorgan_i1_reg_1026 xor ap_const_lv1_1);
    p_39_demorgan_i482_no_fu_826_p2 <= (p_39_demorgan_i2_reg_1050 xor ap_const_lv1_1);
    p_39_demorgan_i_fu_425_p2 <= (signbit_fu_326_p3 or deleted_zeros_fu_411_p3);
    p_39_demorgan_i_not_fu_710_p2 <= (p_39_demorgan_i_reg_1002 xor ap_const_lv1_1);
    p_Val2_13_fu_448_p2 <= std_logic_vector(signed(grp_fu_904_p3) + signed(tmp_16_cast_fu_444_p1));
    p_Val2_14_fu_461_p4 <= p_Val2_13_fu_448_p2(15 downto 8);
    p_Val2_15_fu_490_p2 <= std_logic_vector(unsigned(tmp_13_fu_478_p1) + unsigned(p_Val2_14_fu_461_p4));
    p_Val2_16_fu_291_p0 <= OP1_V_1_fu_247_p1(8 - 1 downto 0);
    p_Val2_16_fu_291_p1 <= c3_c2_V_0_data_reg;
    p_Val2_16_fu_291_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_16_fu_291_p0) * signed(p_Val2_16_fu_291_p1))), 18));
    p_Val2_1_fu_255_p0 <= OP1_V_1_fu_247_p1(8 - 1 downto 0);
    p_Val2_1_fu_255_p1 <= c1_c2_V_0_data_reg;
    p_Val2_1_fu_255_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_1_fu_255_p0) * signed(p_Val2_1_fu_255_p1))), 18));
    p_Val2_21_fu_575_p2 <= std_logic_vector(signed(grp_fu_914_p3) + signed(tmp_27_cast_fu_571_p1));
    p_Val2_22_fu_588_p4 <= p_Val2_21_fu_575_p2(15 downto 8);
    p_Val2_23_fu_617_p2 <= std_logic_vector(unsigned(tmp_22_fu_605_p1) + unsigned(p_Val2_22_fu_588_p4));
    p_Val2_5_fu_321_p2 <= std_logic_vector(signed(grp_fu_894_p3) + signed(tmp_3_cast_fu_317_p1));
    p_Val2_6_fu_334_p4 <= p_Val2_5_fu_321_p2(15 downto 8);
    p_Val2_7_fu_363_p2 <= std_logic_vector(unsigned(tmp_7_fu_351_p1) + unsigned(p_Val2_6_fu_334_p4));
    p_Val2_9_fu_273_p0 <= OP1_V_1_fu_247_p1(8 - 1 downto 0);
    p_Val2_9_fu_273_p1 <= c2_c2_V_0_data_reg;
    p_Val2_9_fu_273_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &p_Val2_9_fu_273_p0) * signed(p_Val2_9_fu_273_p1))), 18));
    p_mux1_fu_779_p3 <= 
        p_Val2_15_reg_1014 when (brmerge_i_i463_not_fu_763_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_mux2_fu_837_p3 <= 
        p_Val2_23_reg_1038 when (brmerge_i_i484_not_fu_821_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_mux_fu_721_p3 <= 
        p_Val2_7_reg_990 when (brmerge_i_i_not_fu_705_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_s_fu_728_p3 <= 
        ap_const_lv8_0 when (neg_src_fu_690_p2(0) = '1') else 
        p_Val2_7_reg_990;
    signbit_1_fu_453_p3 <= p_Val2_13_fu_448_p2(19 downto 19);
    signbit_1_not_fu_753_p2 <= (signbit_1_reg_1008 xor ap_const_lv1_1);
    signbit_2_fu_580_p3 <= p_Val2_21_fu_575_p2(19 downto 19);
    signbit_2_not_fu_811_p2 <= (signbit_2_reg_1032 xor ap_const_lv1_1);
    signbit_fu_326_p3 <= p_Val2_5_fu_321_p2(19 downto 19);
    signbit_not_fu_695_p2 <= (signbit_reg_984 xor ap_const_lv1_1);

    stream_in_24_TDATA_blk_n_assign_proc : process(stream_in_24_data_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_TDATA_blk_n <= stream_in_24_data_0_state(0);
        else 
            stream_in_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_24_TREADY <= stream_in_24_last_V_0_state(1);
    stream_in_24_data_0_ack_in <= stream_in_24_data_0_state(1);

    stream_in_24_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_data_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_24_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_24_data_0_data_out_assign_proc : process(stream_in_24_data_0_payload_A, stream_in_24_data_0_payload_B, stream_in_24_data_0_sel)
    begin
        if ((stream_in_24_data_0_sel = ap_const_logic_1)) then 
            stream_in_24_data_0_data_out <= stream_in_24_data_0_payload_B;
        else 
            stream_in_24_data_0_data_out <= stream_in_24_data_0_payload_A;
        end if; 
    end process;

    stream_in_24_data_0_load_A <= (stream_in_24_data_0_state_cmp_full and not(stream_in_24_data_0_sel_wr));
    stream_in_24_data_0_load_B <= (stream_in_24_data_0_state_cmp_full and stream_in_24_data_0_sel_wr);
    stream_in_24_data_0_sel <= stream_in_24_data_0_sel_rd;
    stream_in_24_data_0_state_cmp_full <= '0' when (stream_in_24_data_0_state = ap_const_lv2_1) else '1';
    stream_in_24_data_0_vld_in <= stream_in_24_TVALID;
    stream_in_24_data_0_vld_out <= stream_in_24_data_0_state(0);
    stream_in_24_last_V_0_ack_in <= stream_in_24_last_V_0_state(1);

    stream_in_24_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_24_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_24_last_V_0_data_out_assign_proc : process(stream_in_24_last_V_0_payload_A, stream_in_24_last_V_0_payload_B, stream_in_24_last_V_0_sel)
    begin
        if ((stream_in_24_last_V_0_sel = ap_const_logic_1)) then 
            stream_in_24_last_V_0_data_out <= stream_in_24_last_V_0_payload_B;
        else 
            stream_in_24_last_V_0_data_out <= stream_in_24_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_24_last_V_0_load_A <= (stream_in_24_last_V_0_state_cmp_full and not(stream_in_24_last_V_0_sel_wr));
    stream_in_24_last_V_0_load_B <= (stream_in_24_last_V_0_state_cmp_full and stream_in_24_last_V_0_sel_wr);
    stream_in_24_last_V_0_sel <= stream_in_24_last_V_0_sel_rd;
    stream_in_24_last_V_0_state_cmp_full <= '0' when (stream_in_24_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_24_last_V_0_vld_in <= stream_in_24_TVALID;
    stream_in_24_last_V_0_vld_out <= stream_in_24_last_V_0_state(0);
    stream_in_24_user_V_0_ack_in <= stream_in_24_user_V_0_state(1);

    stream_in_24_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_user_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_24_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_24_user_V_0_data_out_assign_proc : process(stream_in_24_user_V_0_payload_A, stream_in_24_user_V_0_payload_B, stream_in_24_user_V_0_sel)
    begin
        if ((stream_in_24_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_24_user_V_0_data_out <= stream_in_24_user_V_0_payload_B;
        else 
            stream_in_24_user_V_0_data_out <= stream_in_24_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_24_user_V_0_load_A <= (stream_in_24_user_V_0_state_cmp_full and not(stream_in_24_user_V_0_sel_wr));
    stream_in_24_user_V_0_load_B <= (stream_in_24_user_V_0_state_cmp_full and stream_in_24_user_V_0_sel_wr);
    stream_in_24_user_V_0_sel <= stream_in_24_user_V_0_sel_rd;
    stream_in_24_user_V_0_state_cmp_full <= '0' when (stream_in_24_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_24_user_V_0_vld_in <= stream_in_24_TVALID;
    stream_in_24_user_V_0_vld_out <= stream_in_24_user_V_0_state(0);
    stream_out_24_TDATA <= stream_out_24_data_1_data_out;

    stream_out_24_TDATA_blk_n_assign_proc : process(stream_out_24_data_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            stream_out_24_TDATA_blk_n <= stream_out_24_data_1_state(1);
        else 
            stream_out_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_24_TLAST <= stream_out_24_last_V_1_data_out;
    stream_out_24_TUSER <= stream_out_24_user_V_1_data_out;
    stream_out_24_TVALID <= stream_out_24_last_V_1_state(0);
    stream_out_24_data_1_ack_in <= stream_out_24_data_1_state(1);
    stream_out_24_data_1_ack_out <= stream_out_24_TREADY;

    stream_out_24_data_1_data_out_assign_proc : process(stream_out_24_data_1_payload_A, stream_out_24_data_1_payload_B, stream_out_24_data_1_sel)
    begin
        if ((stream_out_24_data_1_sel = ap_const_logic_1)) then 
            stream_out_24_data_1_data_out <= stream_out_24_data_1_payload_B;
        else 
            stream_out_24_data_1_data_out <= stream_out_24_data_1_payload_A;
        end if; 
    end process;

    stream_out_24_data_1_load_A <= (stream_out_24_data_1_state_cmp_full and not(stream_out_24_data_1_sel_wr));
    stream_out_24_data_1_load_B <= (stream_out_24_data_1_state_cmp_full and stream_out_24_data_1_sel_wr);
    stream_out_24_data_1_sel <= stream_out_24_data_1_sel_rd;
    stream_out_24_data_1_state_cmp_full <= '0' when (stream_out_24_data_1_state = ap_const_lv2_1) else '1';

    stream_out_24_data_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            stream_out_24_data_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_24_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_24_data_1_vld_out <= stream_out_24_data_1_state(0);
    stream_out_24_data_t_fu_859_p4 <= ((out3_V_fu_851_p3 & out2_V_fu_793_p3) & out1_V_fu_735_p3);
    stream_out_24_last_V_1_ack_in <= stream_out_24_last_V_1_state(1);
    stream_out_24_last_V_1_ack_out <= stream_out_24_TREADY;

    stream_out_24_last_V_1_data_out_assign_proc : process(stream_out_24_last_V_1_payload_A, stream_out_24_last_V_1_payload_B, stream_out_24_last_V_1_sel)
    begin
        if ((stream_out_24_last_V_1_sel = ap_const_logic_1)) then 
            stream_out_24_last_V_1_data_out <= stream_out_24_last_V_1_payload_B;
        else 
            stream_out_24_last_V_1_data_out <= stream_out_24_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_24_last_V_1_load_A <= (stream_out_24_last_V_1_state_cmp_full and not(stream_out_24_last_V_1_sel_wr));
    stream_out_24_last_V_1_load_B <= (stream_out_24_last_V_1_state_cmp_full and stream_out_24_last_V_1_sel_wr);
    stream_out_24_last_V_1_sel <= stream_out_24_last_V_1_sel_rd;
    stream_out_24_last_V_1_state_cmp_full <= '0' when (stream_out_24_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_24_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            stream_out_24_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_24_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_24_last_V_1_vld_out <= stream_out_24_last_V_1_state(0);
    stream_out_24_user_V_1_ack_in <= stream_out_24_user_V_1_state(1);
    stream_out_24_user_V_1_ack_out <= stream_out_24_TREADY;

    stream_out_24_user_V_1_data_out_assign_proc : process(stream_out_24_user_V_1_payload_A, stream_out_24_user_V_1_payload_B, stream_out_24_user_V_1_sel)
    begin
        if ((stream_out_24_user_V_1_sel = ap_const_logic_1)) then 
            stream_out_24_user_V_1_data_out <= stream_out_24_user_V_1_payload_B;
        else 
            stream_out_24_user_V_1_data_out <= stream_out_24_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_24_user_V_1_load_A <= (stream_out_24_user_V_1_state_cmp_full and not(stream_out_24_user_V_1_sel_wr));
    stream_out_24_user_V_1_load_B <= (stream_out_24_user_V_1_state_cmp_full and stream_out_24_user_V_1_sel_wr);
    stream_out_24_user_V_1_sel <= stream_out_24_user_V_1_sel_rd;
    stream_out_24_user_V_1_state_cmp_full <= '0' when (stream_out_24_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_24_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            stream_out_24_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_24_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_24_user_V_1_vld_out <= stream_out_24_user_V_1_state(0);
    tmp_12_fu_437_p3 <= (bias_c2_V_read_reg_929 & ap_const_lv8_0);
    tmp_13_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_471_p3),8));
    tmp_14_fu_504_p2 <= (tmp_34_fu_496_p3 xor ap_const_lv1_1);
    tmp_15_fu_516_p4 <= p_Val2_13_fu_448_p2(19 downto 16);
        tmp_16_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_437_p3),20));

    tmp_16_fu_743_p2 <= (p_38_i1_reg_1020 xor ap_const_lv1_1);
    tmp_21_fu_564_p3 <= (bias_c3_V_read_reg_924 & ap_const_lv8_0);
    tmp_22_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_598_p3),8));
    tmp_23_fu_631_p2 <= (tmp_38_fu_623_p3 xor ap_const_lv1_1);
    tmp_24_fu_643_p4 <= p_Val2_21_fu_575_p2(19 downto 16);
    tmp_25_fu_801_p2 <= (p_38_i2_reg_1044 xor ap_const_lv1_1);
        tmp_27_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_564_p3),20));

    tmp_28_fu_344_p3 <= grp_fu_894_p3(7 downto 7);
    tmp_29_fu_355_p3 <= p_Val2_5_fu_321_p2(15 downto 15);
    tmp_2_fu_389_p4 <= p_Val2_5_fu_321_p2(19 downto 16);
    tmp_30_fu_369_p3 <= p_Val2_7_fu_363_p2(7 downto 7);
    tmp_32_fu_471_p3 <= grp_fu_904_p3(7 downto 7);
    tmp_33_fu_482_p3 <= p_Val2_13_fu_448_p2(15 downto 15);
    tmp_34_fu_496_p3 <= p_Val2_15_fu_490_p2(7 downto 7);
    tmp_36_fu_598_p3 <= grp_fu_914_p3(7 downto 7);
    tmp_37_fu_609_p3 <= p_Val2_21_fu_575_p2(15 downto 15);
    tmp_38_fu_623_p3 <= p_Val2_23_fu_617_p2(7 downto 7);
        tmp_3_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_310_p3),20));

    tmp_3_fu_310_p3 <= (bias_c1_V_read_reg_934 & ap_const_lv8_0);
    tmp_5_fu_377_p2 <= (tmp_30_fu_369_p3 xor ap_const_lv1_1);
    tmp_7_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_344_p3),8));
    tmp_8_fu_685_p2 <= (p_38_i_reg_996 xor ap_const_lv1_1);
end behav;
